var zipcode = {
	popup: {
		id: 'DaumZipcodePopup'
	},
	layer: {
		id: 'DaumZipcodeLayer',
		width: 300,
		height: 400,
		borderSize: 5
	},
	theme: { // color 값은 #ffffff 형식으로 입력, 미변경 색상은 공백으로 설정
		bgColor: '', //바탕 배경색
		searchBgColor: '', //검색창 배경색
		contentBgColor: '', //본문 배경색(검색결과,결과없음,첫화면,검색서제스트)
		pageBgColor: '', //페이지 배경색
		textColor: '', //기본 글자색
		queryTextColor: '', //검색창 글자색
		postcodeTextColor: '', //우편번호 글자색
		emphTextColor: '', //강조 글자색
		outlineColor: '' //테두리
	},
	getObject: function(name, parent) {
		var obj = null;

		if (name) {
			switch (name.substr(0, 1)) {
				case '#':
				case '.':
					var $element = (parent ? $(name, parent) : $(name));
					if ($element.length > 0) {
						obj = $element[0];
					}
				break;
				default:
					if (parent) {
						var $element = $(':input[name="'+name+'"]', parent);
						if ($element.length > 0) {
							obj = $element[0];
						}
					}
				break;
			}
		}
		return obj;
	},
	getLayer: function() {
		var $zlayer = $('#'+zipcode.layer.id);

		if ($zlayer.length <= 0) {
			var $close = $('<a href="#" onclick="zipcode.layerClose();return false;" />').css({
				'position': 'absolute',
				'right': '-3px',
				'top': '-3px',
				'z-index': 10000001
			}).append('<img src="//t1.daumcdn.net/localimg/localimages/07/postcode/320/close.png" alt="닫기" />');

			// iOS에서는 position:fixed 버그가 있음, 적용하는 사이트에 맞게 position:absolute 등을 이용하여 top, left값 조정 필요
			$zlayer = $('<div id="'+zipcode.layer.id+'" />').css({
				'position': 'fixed',
				'overflow': 'hidden',
				'z-index': 10000000,
				'-webkit-overflow-scrolling': 'touch',
				'display': 'none'
			}).append($close).appendTo('body');
		}
		$zlayer.hide();

		return $zlayer[0];
	},
	load: function() {
		var scripts = document.getElementsByTagName('script'),
			exists = 0
		;
		for (var i=0; i<scripts.length; i++) {
			if (typeof (scripts[i].src) == 'string') {
				if (scripts[i].src.indexOf('dmaps.daum.net/map_js_init/postcode.v2.js') != -1) {
					exists = 1;
					break;
				}
			}
		}
		if (!exists) {
			var script = document.createElement('script');
			script.type = 'text/javascript';
			script.src = window.location.protocol + '//dmaps.daum.net/map_js_init/postcode.v2.js?autoload=false';
			document.getElementsByTagName('head')[0].appendChild(script);
		}
	},
	execute: function(target, callback) {
		if (!window.daum) {
			return false;
		}
		if (!target) {
			return false;
		}

		// load함수를 이용하여 core스크립트 로딩 완료 후, 우편번호 서비스 실행
		daum.postcode.load(function() {
			var opts = {
				oncomplete: function(data) {
					zipcode.complete(target, callback, data);
				},
				onresize: function(size) { // 팝업모드 미지원
					// console.log('width: '+size.width+', height: '+size.height);
				},
				onclose: function(state) {
					if (state === 'FORCE_CLOSE') {
						// 브라우저 닫기 버튼 클릭 닫기 (레이어모드 미발생)
					}
					else if (state === 'COMPLETE_CLOSE') {
						// 검색결과 선택 후 닫기 (oncomplete 콜백 함수 실행완료 후 실행)
					}
				},
				autoClose: true, // 검색 결과 선택 후, 자동 닫힘을 방지할 경우 false로 설정
				theme: zipcode.theme
			};

			// Open Layer By Iframe
			if (target.embed) {
				var zlayer = zipcode.getLayer();

				new daum.Postcode($.extend(opts, {
					width : '100%',
					height : '100%',
					maxSuggestItems : 5
				})).embed(zlayer);

				zlayer.style.display = 'block';

				zipcode.layerPosition();
			}
			// Open Popup
			else {
				new daum.Postcode(opts).open({
					popupName: zipcode.popup.id
				});
			}
		});
	},
	complete: function(target, callback, data) {
		/*
			sido: "전남"
			sigungu: "신안군"
			bname: "만재도리"
			jibunAddress: "전남 신안군 흑산면 만재도리 산 51-2"
		 */

		// 도로명 주소의 노출 규칙에 따라 주소를 조합한다.
		// 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
		var fullAddr = ''; // 최종 주소 변수
		var extraAddr = ''; // 조합형 주소 변수

		// 사용자가 선택한 주소의 타입에 따라 해당 주소 값을 설정한다.
		switch (data.userSelectedType) {
			case 'R':	// 도로명
				fullAddr = data.roadAddress;

				// 법정동명이 있을 경우 추가한다. (법정리는 제외)
				// 법정동의 경우 마지막 문자가 "동/로/가"로 끝난다.
				if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {
					extraAddr += data.bname;
				}
				// 건물명이 있는 경우 추가한다.
				if (data.buildingName !== '') {
				   extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);
				}
				// 도로명, 지번 조합형 주소가 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.
				if (extraAddr !== '') {
					extraAddr = ' ('+extraAddr+')';
				}
			break;
			case 'J':	// 지번
				fullAddr = data.jibunAddress;
			break;
		}

		try {
			var $post = $(target.post),
				$addr = $(target.addr),
				$addrDetail = $(target.addrDetail),
				$addrRegion = $(target.addrRegion)
			;

			if ($post.length > 0) $post.val(data.zonecode);
			if ($addr.length > 0) $addr.val(fullAddr);

			if ($addrDetail.length > 0) {
				var obj = $addrDetail.val(extraAddr)[0];

				if (obj.setSelectionRange) {
					obj.focus();
					obj.setSelectionRange(0, 0);
				}
				else if (obj.createTextRange) {
					var range = obj.createTextRange();
					range.collapse(true);
					range.moveEnd('character', end);
					range.moveStart('character', start);
					range.select();
				}
			}

			if ($addrRegion.length > 0) {
				$addrRegion.val(data.jibunAddress);
			}

			if (typeof (callback) == 'function') {
				callback(data);
			}
		}
		catch (e) { }

		if (target.embed) {
			zipcode.layerClose();
		}
	},
	layerPosition: function() { // Set Layer Position
		var zlayer = document.getElementById(zipcode.layer.id);
		if (zlayer) {
			zlayer.style.width = zipcode.layer.width + 'px';
			zlayer.style.height = zipcode.layer.height + 'px';
			zlayer.style.border = zipcode.layer.borderSize + 'px solid';

			// 화면 중앙 위치
			zlayer.style.left = (((window.innerWidth || document.documentElement.clientWidth) - zipcode.layer.width) / 2 - zipcode.layer.borderSize) + 'px';
			zlayer.style.top = (((window.innerHeight || document.documentElement.clientHeight) - zipcode.layer.height) / 2 - zipcode.layer.borderSize) + 'px';
		}
	},
	layerClose: function() {
		var zlayer = document.getElementById(zipcode.layer.id);
		if (zlayer) {
			zlayer.style.display = 'none';
		}
	}
}

function daumZipcodeTargetSetting(obj) {
	var group = null;
	var target = {};

	var $zgroup = $(obj).closest('.zip-group');
	if ($zgroup.length == 0) {
		$zgroup = $(obj).closest('form');
	}
	if ($zgroup.length > 0) {
		group = $zgroup[0];
	}

	if ($(obj).attr('zip-post')) {
		target = {
			post: zipcode.getObject($(obj).attr('zip-post'), group),
			addr: zipcode.getObject($(obj).attr('zip-addr'), group),
			addrDetail: zipcode.getObject($(obj).attr('zip-detail'), group),
			addrRegion: zipcode.getObject($(obj).attr('zip-region'), group)
		};
	}
	if (! target.post) {
		target = {
			post: zipcode.getObject('post', group),
			addr: zipcode.getObject('addr', group),
			addrDetail: zipcode.getObject('addrDetail', group),
			addrRegion: zipcode.getObject('addrRegion', group)
		};
	}

	if ($(obj).attr('zip-embed')) {
		target.embed = 1;
	}

	return target;
}

// 수동 우편번호 검색 오픈
function daumZipcodeOpen(obj, callback) {
	var target = daumZipcodeTargetSetting(obj);

	zipcode.execute(target, callback);
}

$(function() {
	$(document).on('click', '.zipcode-open', function() {
		var target = daumZipcodeTargetSetting(this);

		zipcode.execute(target);

		return false;
	});

	zipcode.load();
});
