/* common_util.packer.js */
try { if (navigator.appVersion.indexOf("MSIE") && (navigator.appName.indexOf("Opera") == -1)) { document.execCommand("BackgroundImageCache", false, true) } } catch (err) { } function isValid_corp_no(no) { var regStr = /^[0-9]{13}$/; if (!regStr.test(no)) { return false } if ('0000000000000' == no) { return false } return true; var str = no.toString(); a = str.substring(0, 1); b = str.substring(1, 2); c = str.substring(2, 3); d = str.substring(3, 4); e = str.substring(4, 5); f = str.substring(5, 6); g = str.substring(6, 7); h = str.substring(7, 8); i = str.substring(8, 9); j = str.substring(9, 10); k = str.substring(10, 11); l = str.substring(11, 12); m = str.substring(12, 13); var sum = a * 1 + b * 2 + c * 1 + d * 2 + e * 1 + f * 2 + g * 1 + h * 2 + i * 1 + j * 2 + k * 1 + l * 2; var tmp = 0; tmp = 10 - (sum % 10); if (10 == tmp) tmp = 0; if (tmp == m) { return true } else { return false } } function isValid_bizr_no(no) { var regStr = /^[0-9]{10}$/; if (!regStr.test(no)) { return false } if ('0000000000' == no || '4444444444' == no || '8888888888' == no) { return false } var str = no.toString(); a = str.substring(0, 1); b = str.substring(1, 2); c = str.substring(2, 3); d = str.substring(3, 4); e = str.substring(4, 5); f = str.substring(5, 6); g = str.substring(6, 7); h = str.substring(7, 8); i = str.substring(8, 9); j = str.substring(9, 10); var sum = 0; sum += a * 1 % 10; sum += b * 3 % 10; sum += c * 7 % 10; sum += d * 1 % 10; sum += e * 3 % 10; sum += f * 7 % 10; sum += g * 1 % 10; sum += h * 3 % 10; sum += i * 5 % 10 + Math.floor(i * 5 / 10); sum += j * 1 % 10; if (sum % 10 == 0) { return true } else { return false } } function isValid_uniq_no(no) { return isValid_bizr_no(no) } function isValid_socno(socno) { var socnoStr = socno.toString(); a = socnoStr.substring(0, 1); b = socnoStr.substring(1, 2); c = socnoStr.substring(2, 3); d = socnoStr.substring(3, 4); e = socnoStr.substring(4, 5); f = socnoStr.substring(5, 6); g = socnoStr.substring(6, 7); h = socnoStr.substring(7, 8); i = socnoStr.substring(8, 9); j = socnoStr.substring(9, 10); k = socnoStr.substring(10, 11); l = socnoStr.substring(11, 12); m = socnoStr.substring(12, 13); month = socnoStr.substring(2, 4); day = socnoStr.substring(4, 6); socnoStr1 = socnoStr.substring(0, 7); socnoStr2 = socnoStr.substring(7, 13); if (month <= 0 || month > 12) { return false } if (day <= 0 || day > 31) { return false } if (isNaN(socnoStr1) || isNaN(socnoStr2)) { return false } temp = a * 2 + b * 3 + c * 4 + d * 5 + e * 6 + f * 7 + g * 8 + h * 9 + i * 2 + j * 3 + k * 4 + l * 5; temp = temp % 11; temp = 11 - temp; temp = temp % 10; if (temp == m) { return true } else { return false } } function isValid_fgnno(socno) { var total = 0; var parity = 0; var fgnNo = new Array(13); for (i = 0; i < 13; i++) fgnNo[i] = parseInt(socno.charAt(i)); if (fgnNo[11] < 6) return false; if ((parity = fgnNo[7] * 10 + fgnNo[8]) & 1) return false; var weight = 2; for (i = 0, total = 0; i < 12; i++) { var sum = fgnNo[i] * weight; total += sum; if (++weight > 9) weight = 2 } if ((total = 11 - (total % 11)) >= 10) total -= 10; if ((total += 2) >= 10) total -= 10; if (total != fgnNo[12]) return false; return true } function isValid_id(str) { if (str == "") { alert("아이디를 입력하세요."); return false } var retVal = checkSpace(str); if (retVal) { alert("아이디는 빈 공간 없이 연속된 영문 소문자와 숫자만 사용할 수 있습니다."); return false } if (str.charAt(0) == '_') { alert("아이디의 첫문자는 '_'로 시작할수 없습니다."); return false } var isID = /^[a-z0-9_]{3,12}$/; if (!isID.test(str)) { alert("아이디는 3~12자의 영문 소문자와 숫자,특수기호(_)만 사용할 수 있습니다."); return false } var isNum = /\d/; var i; var cnt = 0; for (i = 0; i < str.length; i++) { if (isNum.test(str.substring(i, i + 1))) { cnt++ } if (cnt > 7) { alert("숫자가 8개 이상 사용되면 안됩니다."); return false } } return true } function isValid_passwd(str) { var cnt = 0; if (str == "") { alert("비밀번호를 입력하세요."); return false } var retVal = checkSpace(str); if (retVal) { alert("비밀번호에는 공백이 있으면 안됩니다."); return false } if (str.length < 6) { alert("비밀번호는 6~16자의 영문 대소문자와 숫자, 특수문자를 사용할 수 있습니다."); return false } for (var i = 0; i < str.length; ++i) { if (str.charAt(0) == str.substring(i, i + 1)) ++cnt } if (cnt == str.length) { alert("보안상의 이유로 한 문자로 연속된 비밀번호는 허용하지 않습니다."); return false } return true } function isValid_email(str) { if (str == "") { alert("이메일 주소를 입력하세요."); return false } var retVal = checkSpace(str); if (retVal) { alert("이메일 주소를 빈공간 없이 넣으세요."); return false } if (-1 == str.indexOf('.')) { alert("이메일 형식이 잘못 되었습니다."); return false } var isEmail = /[-!#$%&'*+\/^_~{}|0-9a-zA-Z]+(\.[-!#$%&'*+\/^_~{}|0-9a-zA-Z]+)*@[-!#$%&'*+\/^_~{}|0-9a-zA-Z]+(\.[-!#$%&'*+\/^_~{}|0-9a-zA-Z]+)*/; if (!isEmail.test(str)) { alert("이메일 형식이 잘못 되었습니다."); return false } if (str.length > 60) { alert("이메일 주소는 60자까지 유효합니다."); return false } return true } function isValid_email2(word) { for (var i = 0; i < word.length; i++) { var checkStr = word.charAt(i); if ("@" == checkStr) { return false } } return true } function isValid_name(str) { str = str.replace(/(^\s*)|(\s*$)/g, ""); if (str == '') { alert("이름을 입력하세요."); return false } var retVal = checkSpace(str); if (retVal) { alert("이름은 띄어쓰기 없이 입력하세요."); return false } if (!isHangul(str)) { alert("이름을 한글로 입력하세요."); return false } if (str.length > 10) { alert("이름은 10자까지만 사용할 수 있습니다."); return false } return true } function isValid_ForeignName(str) { var isENAME = /^[A-Z  ]{3,40}$/; if (!isENAME.test(str)) { return false } return true } function isXP() { var agent = window.navigator.userAgent; if (agent.indexOf("MSIE") != -1 && agent.indexOf("5.1") != -1) return true; else return false } function isXPSP2() { var tmp_MSIE = window.navigator.userAgent.indexOf("MSIE"); if (tmp_MSIE && window.navigator.userAgent.indexOf("SV1") > tmp_MSIE) { return true } else { return false } } function isIE7() { var agent = window.navigator.userAgent; if (agent.indexOf("MSIE 7") != -1) return true; else return false } function isIE8() { var agent = window.navigator.userAgent; if (agent.indexOf("MSIE 8") != -1) return true; else return false } function isIE() { var agent = window.navigator.userAgent; if (agent.indexOf("MSIE") != -1) return true; else return false } function isHangul(s) { var len; len = s.length; for (var i = 0; i < len; i++) { if (s.charCodeAt(i) != 32 && (s.charCodeAt(i) < 44032 || s.charCodeAt(i) > 55203)) return false } return true } function checkSpace(str) { if (str.search(/\s/) != -1) { return true } else { return false } } function winOpenAtCenter(sURL, sWindowName, w, h, sScroll) { var x = (screen.width - w) / 2; var y = (screen.height - h) / 2; if (sScroll == null) sScroll = "no"; var sOption = ""; sOption = sOption + "toolbar=no, channelmode=no, location=no, directories=no, resizable=no, menubar=no"; sOption = sOption + ", scrollbars=" + sScroll + ", left=" + x + ", top=" + y + ", width=" + w + ", height=" + h; var win = window.open(sURL, sWindowName, sOption); return win } function winOpenAtCenter2(sURL, sWindowName, w, h, sScroll) { var win2 = winOpenAtCenter(sURL, sWindowName, w, h, sScroll) }; function window_resize(winWidth, winHeight) { document.body.style.overflow = 'hidden'; var clintAgent = navigator.userAgent; var foxHeight = 80; var ieHeight = 60; var ie7Height = 80; var ie8Height = 90; if (clintAgent.indexOf("MSIE") != -1) { var res = isIE7(); if (isIE7()) { window.resizeTo(winWidth, winHeight + ie7Height) } else if (isIE8()) { window.resizeTo(winWidth, winHeight + ie8Height) } else { window.resizeTo(winWidth, winHeight + ieHeight) } } else { window.resizeTo(winWidth, winHeight + foxHeight) } } function setCookie(name, value, expiredays, domain) { var todayDate = new Date(); todayDate.setDate(todayDate.getDate() + expiredays); if (domain == "") domain = ".nid.naver.com"; document.cookie = name + "=" + escape(value) + "; path=/; expires=" + todayDate.toGMTString() + ";" + (domain ? "domain=" + domain : "") + ";" } function getCookie(name) { var nameOfCookie = name + "="; var x = 0; while (x <= document.cookie.length) { var y = (x + nameOfCookie.length); if (document.cookie.substring(x, y) == nameOfCookie) { if ((endOfCookie = document.cookie.indexOf(";", y)) == -1) endOfCookie = document.cookie.length; return unescape(document.cookie.substring(y, endOfCookie)) } x = document.cookie.indexOf(" ", x) + 1; if (x == 0) break } return "" } var next_go = true; var cur_val = null; function moveNext(id_from, id_to, maxSize) { var cur = document.getElementById(id_from).value; curSize = cur.length; numFlag = isNumeric(cur); if (!numFlag && curSize >= 1 && cur != '00' && cur != '000') { alert('숫자를 넣어주세요'); document.getElementById(id_from).value = ''; document.getElementById(id_from).focus(); return false } if (curSize == maxSize) { if (next_go || cur_val != cur) { cur_val = cur; next_go = false; document.getElementById(id_to).focus() } return true } next_go = true } function num_only(Ev) { var evCode = (window.netscape) ? Ev.which : event.keyCode; if (!(evCode == 0 || evCode == 8 || (evCode >= 48 && evCode <= 57) || (evCode == 13))) { if (window.netscape) { Ev.preventDefault() } else { event.returnValue = false } } } function trim(string) { for (; string.indexOf(" ") != -1; ) { string = string.replace(" ", "") } return string } function containsCharsOnly(input, chars) { for (var i = 0; i < input.length; i++) { if (chars.indexOf(input.charAt(i)) == -1) return false } return true } function isNumeric(input) { var chars = "0123456789"; return containsCharsOnly(input, chars) } var db = new Array("1", "2", "3"); var agent = window.navigator.userAgent; var busy = false; function check_num(frm, sel) { if (!busy && db[sel] != $(frm).value && $(frm).value != "") { busy = true; var str = $(frm).value; if (!isNumeric(str)) { if (agent.indexOf("Macintosh") != -1) { $(frm).value = ""; alert("숫자를 넣어주세요."); $(frm).value = ""; db[sel] = "" } else { alert("숫자를 넣어주세요."); $(frm).value = "" } } else { db[sel] = $(frm).value } busy = false } else { setTimeout("check_num('" + frm + "','" + sel + "')", 10) } } function isValid_ReName(str) { str = str.replace(/(^\s*)|(\s*$)/g, ""); if (str == '') { alert("이름을 입력하세요."); return false } var retVal = checkSpace(str); if (retVal) { alert("이름은 띄어쓰기 없이 입력하세요."); return false } if (!isValid_txtName(str)) { return false } if (str.length > 30) { alert("이름은 30자까지만 사용할 수 있습니다."); return false } return true } function isValid_txtName(str) { var istxtNAME = /^[가-힣]{2,4}|[a-zA-Z]{2,10}$/; if (!istxtNAME.test(str)) { return false } else { return true } }

/* calendarScrap_re.js */
if (typeof window != "undefined" && typeof window.nhn == "undefined") { window.nhn = {}; }
var _gbIE = /MSIE/.test(navigator.userAgent); nhn.calendarScrap = { _elIframe: null, _nPosLeft: 0, _nPosTop: 0, initialize: function() { }, scrap: function(e, aData) {
    if (e) { this._nPosTop = e.offsetTop; this._nPosLeft = e.offsetLeft; }
    if (!this._elIframe) {
        try { this._elIframe = document.createElement("<iframe name='calendarScrap'>"); } catch (err) { this._elIframe = document.createElement("iframe"); }
        this._elIframe.setAttribute("title", "캘린더 일정 추가"); this._elIframe.setAttribute("name", "calendarScrap"); this._elIframe.setAttribute("id", "calendarScrap"); this._elIframe.setAttribute("frameBorder", "0"); this._elIframe.setAttribute("marginwidth", "0"); this._elIframe.setAttribute("marginheight", "0"); this._elIframe.setAttribute("scrolling", "no"); this._elIframe.setAttribute("width", "305"); this._elIframe.setAttribute("height", "191"); this._elIframe.style.position = "absolute"; this._elIframe.style.left = "-1000px"; this._elIframe.style.top = "-1000px"; e.parentNode.appendChild(this._elIframe); this._elForm = document.createElement("form"); this._elForm.setAttribute("action", "http://calendar.naver.com/external_layer.nhn"); this._elForm.setAttribute("target", "calendarScrap"); this._elForm.setAttribute("method", "post"); document.body.appendChild(this._elForm); var elInputHTML = []; elInputHTML.push("<input type='hidden' name='action' value='scrapSimple'></input>"); elInputHTML.push("<input type='hidden' name='encoded' value='true'></input>"); for (var i = 0, nFor = aData.length; i < nFor; i++) {
        if (aData[i][0] == "content" || aData[i][0] == "pageInfo" || aData[i][0] == "place" || aData[i][0] == "memo") { aData[i][1] = encodeURIComponent(aData[i][1]); }
            
            elInputHTML.push("<input type='hidden' name='" + aData[i][0] + "' value='" + aData[i][1] + "'></input>");
        }
        this._elForm.innerHTML = elInputHTML.join(""); this._elForm.submit();
    } else { this._elIframe.style.display = "block"; this._elForm.submit(); } 
}, close: function() { this._elIframe.style.display = "none"; this._elIframe.style.left = "-1000px"; this._elIframe.style.top = "-1000px"; }, show: function() { this._elIframe.style.display = "block"; this._elIframe.style.left = this._nPosLeft + 477 + "px"; this._elIframe.style.top = this._nPosTop + 232 + "px"; }
};

/*zeroClipboard.packer.js*/
var ZeroClipboard = { version: "1.0.5", clients: {}, moviePath: '/Flash/ZeroClipboard.swf', nextId: 1, $: function(thingy) { if (typeof (thingy) == 'string') thingy = document.getElementById(thingy); if (!thingy.addClass) { thingy.hide = function() { this.style.display = 'none' }; thingy.show = function() { this.style.display = '' }; thingy.addClass = function(name) { this.removeClass(name); this.className += ' ' + name }; thingy.removeClass = function(name) { this.className = this.className.replace(new RegExp("(^|\\s+)" + name + "(\\s+|$)"), "").replace(/^\s+|\s+$/g, '') }; thingy.hasClass = function(name) { return !!this.className.match(new RegExp("\\s*" + name + "\\s*")) } } return thingy }, setMoviePath: function(path) { this.moviePath = path }, dispatch: function(id, eventName, args) { var client = this.clients[id]; if (client) { client.receiveEvent(eventName, args) } }, register: function(id, client) { this.clients[id] = client }, getDOMObjectPosition: function(obj, stopObj) { var info = { left: 0, top: 0, width: obj.width ? obj.width : obj.offsetWidth, height: obj.height ? obj.height : obj.offsetHeight }; while (obj && (obj != stopObj)) { info.left += obj.offsetLeft; info.top += obj.offsetTop; obj = obj.offsetParent } return info }, Client: function(elem) { this.handlers = {}; this.id = ZeroClipboard.nextId++; this.movieId = 'ZeroClipboardMovie_' + this.id; ZeroClipboard.register(this.id, this); if (elem) this.glue(elem) } }; ZeroClipboard.Client.prototype = { id: 0, ready: false, movie: null, clipText: '', handCursorEnabled: true, cssEffects: true, handlers: null, glue: function(elem, appendElem, stylesToAdd) { this.domElement = ZeroClipboard.$(elem); var zIndex = 99; if (this.domElement.style.zIndex) { zIndex = parseInt(this.domElement.style.zIndex, 10) + 1 } if (typeof (appendElem) == 'string') { appendElem = ZeroClipboard.$(appendElem) } else if (typeof (appendElem) == 'undefined') { appendElem = document.getElementsByTagName('body')[0] } var box = ZeroClipboard.getDOMObjectPosition(this.domElement, appendElem); this.div = document.createElement('div'); var style = this.div.style; style.position = 'absolute'; style.left = '' + box.left + 'px'; style.top = '' + box.top + 'px'; style.width = '' + box.width + 'px'; style.height = '' + box.height + 'px'; style.zIndex = zIndex; if (typeof (stylesToAdd) == 'object') { for (addedStyle in stylesToAdd) { style[addedStyle] = stylesToAdd[addedStyle] } } appendElem.appendChild(this.div); this.div.innerHTML = this.getHTML(box.width, box.height) }, getHTML: function(width, height) { var html = ''; var flashvars = 'id=' + this.id + '&width=' + width + '&height=' + height; if (navigator.userAgent.match(/MSIE/)) { var protocol = location.href.match(/^https/i) ? 'https://' : 'http://'; html += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="' + protocol + 'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="' + width + '" height="' + height + '" id="' + this.movieId + '" align="middle"><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="' + ZeroClipboard.moviePath + '" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="' + flashvars + '"/><param name="wmode" value="transparent"/></object>' } else { html += '<embed id="' + this.movieId + '" src="' + ZeroClipboard.moviePath + '" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="' + width + '" height="' + height + '" name="' + this.movieId + '" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="' + flashvars + '" wmode="transparent" />' } return html }, hide: function() { if (this.div) { this.div.style.left = '-2000px' } }, show: function() { this.reposition() }, destroy: function() { if (this.domElement && this.div) { this.hide(); this.div.innerHTML = ''; var body = document.getElementsByTagName('body')[0]; try { body.removeChild(this.div) } catch (e) { } this.domElement = null; this.div = null } }, reposition: function(elem) { if (elem) { this.domElement = ZeroClipboard.$(elem); if (!this.domElement) this.hide() } if (this.domElement && this.div) { var box = ZeroClipboard.getDOMObjectPosition(this.domElement); var style = this.div.style; style.left = '' + box.left + 'px'; style.top = '' + box.top + 'px' } }, setText: function(newText) { this.clipText = newText; if (this.ready) this.movie.setText(newText) }, addEventListener: function(eventName, func) { eventName = eventName.toString().toLowerCase().replace(/^on/, ''); if (!this.handlers[eventName]) this.handlers[eventName] = []; this.handlers[eventName].push(func) }, setHandCursor: function(enabled) { this.handCursorEnabled = enabled; if (this.ready) this.movie.setHandCursor(enabled) }, setCSSEffects: function(enabled) { this.cssEffects = !!enabled }, receiveEvent: function(eventName, args) { eventName = eventName.toString().toLowerCase().replace(/^on/, ''); switch (eventName) { case 'load': this.movie = document.getElementById(this.movieId); if (!this.movie) { var self = this; setTimeout(function() { self.receiveEvent('load', null) }, 1); return } if (!this.ready && navigator.userAgent.match(/Firefox/) && navigator.userAgent.match(/Windows/)) { var self = this; setTimeout(function() { self.receiveEvent('load', null) }, 100); this.ready = true; return } this.ready = true; this.movie.setText(this.clipText); this.movie.setHandCursor(this.handCursorEnabled); break; case 'mouseover': if (this.domElement && this.cssEffects) { this.domElement.addClass('hover'); if (this.recoverActive) this.domElement.addClass('active') } break; case 'mouseout': if (this.domElement && this.cssEffects) { this.recoverActive = false; if (this.domElement.hasClass('active')) { this.domElement.removeClass('active'); this.recoverActive = true } this.domElement.removeClass('hover') } break; case 'mousedown': if (this.domElement && this.cssEffects) { this.domElement.addClass('active') } break; case 'mouseup': if (this.domElement && this.cssEffects) { this.domElement.removeClass('active'); this.recoverActive = false } break } if (this.handlers[eventName]) { for (var idx = 0, len = this.handlers[eventName].length; idx < len; idx++) { var func = this.handlers[eventName][idx]; if (typeof (func) == 'function') { func(this, args) } else if ((typeof (func) == 'object') && (func.length == 2)) { func[0][func[1]](this, args) } else if (typeof (func) == 'string') { window[func](this, args) } } } } };

/*nclk.js*/
var nclkVs = "0.1.2"; var nclkIS = (navigator.userAgent.toLowerCase().indexOf("safari") != -1 ? true : false); var nclkMd = "cc"; if (!g_pid) { var g_pid = "" } if (!g_sid) { var g_sid = "" } if (!ccsrv) { var ccsrv = "cc.naver.com" } if (!nsc) { var nsc = "decide.me" } var nClkImg = []; function nclk(h, y, q, e, f, v) { var k, n, d, p, j, u; var w = (window.location.protocol == "https:") ? "https:" : "http:"; if (!f) { f = 0 } if (!v) { v = "" } u = ""; if (window.g_ssc != undefined && window.g_query != undefined) { p = 1 } else { p = 0 } if (f == 1) { k = 0 } else { if (h.href) { j = h.tagName.toLowerCase(); u = h.href.toLowerCase(); if ((h.target && h.target != "_self" && h.target != "_top" && h.target != "_parent") || (u.indexOf("javascript:") != -1) || (h.getAttribute("href", 2) && h.getAttribute("href", 2).charAt(0) == "#") || (u.indexOf("#") != -1 && (u.substr(0, h.href.indexOf("#")) == document.URL)) || j == "img") { k = 0 } else { k = 1 } } else { k = 0 } } if (u && u.indexOf(w + "//" + ccsrv) == 0) { n = h.href } else { n = w + "//" + ccsrv + "/" + nclkMd + "?a=" + y + "&r=" + e + "&i=" + q + "&m=" + k; if (p == 1) { n += "&ssc=" + g_ssc + "&q=" + encodeURIComponent(g_query) + "&s=" + g_sid + "&p=" + g_pid + "&g=" + v } else { n += "&nsc=" + nsc } if (u && u.indexOf(w + "//" + ccsrv) != 0 && j && j != "img") { n += "&u=" + encodeURIComponent(h.href) } else { n += "&u=about%3Ablank" } } if (k == 1) { d = h.innerHTML; h.href = n; if (h.innerHTML != d) { h.innerHTML = d } } else { if (document.images) { var z = new Date().getTime(); n += "&time=" + z; if (nclkIS && !h.href) { var x = c = new Date(); while ((x.getTime() - c.getTime()) < 100) { x = new Date() } var s = new Image(); nClkImg.push(h); s.src = n } else { var s = new Image(); nClkImg.push(h); s.src = n } } } return true };

/*Core.js*/
var nhn = nhn || {};
nhn.movie = nhn.movie || {};
nhn.movie.end = nhn.movie.end || {};
nhn.movie.end.movie = nhn.movie.end.movie || {};
nhn.movie.end.people = nhn.movie.end.people || {};

nhn.movie.Core = {};

/*LNB.js*/
(function(jindo) {

    var htDefaultOptions = {
        sMenuScrollBoxId: 'scrollbar',
        sHeaderId: 'header',
        nMinWidthForHorizontalMiddle: 1280
    };

    var oNavigator = jindo.$Agent().navigator();
    nhn.movie.LNB = jindo.$Class({

        $init: function(htOptions) {
            this.option(htDefaultOptions);
            this.option(htOptions || {});
            this._welMenuScrollBox = jindo.$Element(this.option('sMenuScrollBoxId'));

            if (oNavigator.version > 7) {

                try {
                    this._oMenuScrollBox = new jindo.ScrollBox(this._welMenuScrollBox.$value(), {
                        nDelta: 32,
                        sOverflowX: 'hidden',
                        sOverflowY: 'auto'
                    });
                }
                catch (e) {
                    // IE 8,9의 호환성 보기 모드에서 문제가 발생할 경우, 해당 로직 스킵.
                }
            }

            this._oDocument = jindo.$Document();

            this._nMenuWidth = this._welMenuScrollBox.$value().offsetWidth;
            this._nMenuOffsetTop = 47;

            this._wfWindowResize = jindo.$Fn(this._onWindowResize, this);
            this._wfWindowScroll = jindo.$Fn(this._onWindowScroll, this);

            this.update();
            this._wfWindowResize.attach(window, 'resize');
            this._wfWindowScroll.attach(window, 'scroll');
        },

        _onWindowResize: function(we) {
            this.update();
        },

        _onWindowScroll: function(we) {
            clearTimeout(this._nTimer);
            this._nTimer = null;
            this._nTimer = setTimeout(jindo.$Fn(function() {
            }, this).bind(), 0);
        },

        update: function() {
            jindo.$Element('header').attr({
                "style": "bottom: 0;"
            });
            if (oNavigator.version > 7) {
                // 스크롤박스 사이즈 조절
                // 상단 스크립트에서 _oMenuScrollBox 를 정의하는 부분에 오류가 있을 경우, 해당 로직을 실행하지 않음.
                if (this._oMenuScrollBox != undefined) {
                    var htDocSize = this._oDocument.clientSize();
                    this._nPrevMenuScrollTop = this._oMenuScrollBox.getScrollTop();
                    this._oMenuScrollBox.setSize(
	    				this._nMenuWidth,
	    				htDocSize.height - this._nMenuOffsetTop
	    		);
                    this._oMenuScrollBox.setScrollTop(this._nPrevMenuScrollTop);
                }
            }
        }

    }).extend(jindo.Component);

})(jindo);